openapi: 3.0.0
info:
  description: |
    This is simple client API
  version: "1.0.0"
  title: User Service
  contact:
    email: schetinnikov@gmail.com
servers:
  - url: /
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              sample-user:
                summary: Example
                value:
                  username: johndoe589
                  firstName: John
                  lastName: Doe
                  email: bestjohn@doe.com
                  phone: '+71002003040'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{userId}:
    get:
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - user
      description: Returns a user based on a single ID, if the user does not have access to the user
      operationId: find user by id
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
      - name: userId
        in: path
        description: ID of user
        required: true
        schema:
          type: integer
          format: int64
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      responses:
        '200':
          description: user deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - user
    put:
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - user
      description: Update user with User ID supplied
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
            examples:
              sample-user:
                summary: Example
                value:
                  username: johndoe589
                  firstName: John
                  lastName: Doe
                  email: bestjohn@doe.com
                  phone: '+71002003040'

      responses:
        '200':
          description: user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          maxLength: 256
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          format: phone
      required:
        - username
        - firstName
        - lastName
        - phone
      example:
        username: johndoe589
        firstName: John
        lastName: Doe
        email: bestjohn@doe.com
        phone: '+71002003040'
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          maxLength: 256
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          format: phone
      required:
        - username
        - firstName
        - lastName
        - phone
        - email
      example:
        username: johndoe589
        firstName: John
        lastName: Doe
        email: bestjohn@doe.com
        phone: '+71002003040'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    UserResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
      example:
        id: 10
    OK:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
#  requestBodies:
#    UserArray:
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/User'
#      description: List of user object
#      required: true