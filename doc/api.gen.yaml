components:
  schemas:
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    OK:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    UpdateUser:
      example:
        email: bestjohn@doe.com
        firstName: John
        lastName: Doe
        phone: "+71002003040"
        username: johndoe589
      properties:
        email:
          format: email
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          format: phone
          type: string
        username:
          maxLength: 256
          type: string
      required:
      - username
      - firstName
      - lastName
      - phone
      - email
      type: object
    User:
      example:
        email: bestjohn@doe.com
        firstName: John
        lastName: Doe
        phone: "+71002003040"
        username: johndoe589
      properties:
        email:
          format: email
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          format: phone
          type: string
        username:
          maxLength: 256
          type: string
      required:
      - username
      - firstName
      - lastName
      - phone
      type: object
    UserResponse:
      example:
        id: 10
      properties:
        id:
          format: int64
          type: integer
      required:
      - id
      type: object
generate:
  models: true
info:
  contact:
    email: schetinnikov@gmail.com
  description: |
    This is simple client API
  title: User Service
  version: 1.0.0
openapi: 3.0.0
output: internal/delivery/user/model.go
package: user
paths:
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            examples:
              sample-user:
                summary: Example
                value:
                  email: bestjohn@doe.com
                  firstName: John
                  lastName: Doe
                  phone: "+71002003040"
                  username: johndoe589
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal error
      summary: Create user
      tags:
      - user
  /user/{userId}:
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
      - description: ID of user
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
          description: user deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
      tags:
      - user
    get:
      description: Returns a user based on a single ID, if the user does not have
        access to the user
      operationId: find user by id
      parameters:
      - description: ID of user
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
      tags:
      - user
    put:
      description: Update user with User ID supplied
      operationId: updateUser
      parameters:
      - description: ID of user
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              sample-user:
                summary: Example
                value:
                  email: bestjohn@doe.com
                  firstName: John
                  lastName: Doe
                  phone: "+71002003040"
                  username: johndoe589
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
          description: user updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
      tags:
      - user
servers:
- url: /
tags:
- description: Operations about user
  name: user
